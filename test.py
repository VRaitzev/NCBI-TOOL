# test_fixed_system.py
import os
import json
from mcp import StdioServerParameters
from smolagents import ToolCollection

def test_fixed_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    
    print("üß™ –¢–ï–°–¢–ò–†–£–ï–ú –ò–°–ü–†–ê–í–õ–ï–ù–ù–£–Æ –°–ò–°–¢–ï–ú–£")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    server_params = StdioServerParameters(
        command="python",
        args=[r"D:\PROGRAMMS\Python Projects\NCBI MCP\ncbi-mcp-server\ncbi_mcp_server\server.py"],
        env={
            "NCBI_API_KEY": os.getenv("NCBI_API_KEY", "1aaf2b6cc3fdcba2a548e4109720ad297909"),
            "NCBI_EMAIL": os.getenv("NCBI_EMAIL", "test@example.com")
        }
    )
    
    try:
        with ToolCollection.from_mcp(
            server_parameters=server_params,
            trust_remote_code=True,
            structured_output=False
        ) as tools:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –ü–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
            print("üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
            for tool in tools.tools:
                print(f"   - {tool.name}: {tool.description[:100]}...")
            
            # –¢–ï–°–¢ 1: Gene –±–∞–∑–∞ (—Ä–∞–Ω–µ–µ —Å–ª–æ–º–∞–Ω–Ω–∞—è)
            print("\n1. üî¨ –¢–ï–°–¢ GENE –ë–ê–ó–´:")
            print("   –ó–∞–ø—Ä–æ—Å: summarize_records('gene', ['4780'])")
            try:
                # –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —á–µ—Ä–µ–∑ call()
                result = tools.tools[2].call(database='gene', ids=['4780'])
                print("   ‚úÖ –£–°–ü–ï–•!")
                
                # –ü–∞—Ä—Å–∏–º JSON –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
                data = json.loads(result)
                if data.get("success"):
                    print("   üìä –î–ê–ù–ù–´–ï:")
                    for summary in data["summaries"]:
                        print(f"     - UID: {summary['uid']}")
                        print(f"     - Title: {summary['title']}")
                        if 'description' in summary:
                            desc = summary['description']
                            if len(desc) > 100:
                                desc = desc[:100] + "..."
                            print(f"     - Description: {desc}")
                        print(f"     - –í—Å–µ –ø–æ–ª—è: {list(summary.keys())}")
                        
                    print("   üéâ GENE –ë–ê–ó–ê –†–ê–ë–û–¢–ê–ï–¢ –ë–ï–ó –û–®–ò–ë–ö–ò 'DocSum'!")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {data.get('error')}")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                import traceback
                traceback.print_exc()
            
            # –¢–ï–°–¢ 2: Protein –±–∞–∑–∞ (–¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            print("\n2. üß¨ –¢–ï–°–¢ PROTEIN –ë–ê–ó–´:")
            print("   –ó–∞–ø—Ä–æ—Å: summarize_records('protein', ['693842'])")
            try:
                result = tools.tools[2].call(database='protein', ids=['693842'])
                print("   ‚úÖ –£–°–ü–ï–•!")
                data = json.loads(result)
                if data.get("success"):
                    print("   üìä –î–ê–ù–ù–´–ï:")
                    for summary in data["summaries"]:
                        print(f"     - UID: {summary['uid']}")
                        print(f"     - Title: {summary['title']}")
                        print(f"     - –í—Å–µ –ø–æ–ª—è: {list(summary.keys())}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: {data.get('error')}")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # –¢–ï–°–¢ 3: –ü–æ–∏—Å–∫
            print("\n3. üîç –¢–ï–°–¢ –ü–û–ò–°–ö–ê:")
            try:
                result = tools.tools[0].call(
                    database='gene', 
                    query='nrf2 human', 
                    max_results=1,
                    sort_order='relevance'
                )
                data = json.loads(result)
                if data.get("success"):
                    print(f"   ‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç! –ù–∞–π–¥–µ–Ω–æ: {data['total_count']} –∑–∞–ø–∏—Å–µ–π")
                    if data["ids"]:
                        print(f"   –ü–µ—Ä–≤—ã–π ID: {data['ids'][0]}")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {data.get('error')}")
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        import traceback
        traceback.print_exc()

def main():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç...")
    print("=" * 50)
    
    test_fixed_system()
    
    print("\n" + "=" * 50)
    print("üéØ –û–ñ–ò–î–ê–ï–ú–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("‚úÖ Gene –±–∞–∑–∞: –î–û–õ–ñ–ù–ê —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –æ—à–∏–±–∫–∏ 'DocSum'")
    print("‚úÖ Protein –±–∞–∑–∞: –æ–±—ã—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∫–∞–∫ —Ä–∞–Ω—å—à–µ") 
    print("‚úÖ –ü–æ–∏—Å–∫: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π")

if __name__ == "__main__":
    main()